{"version":3,"sources":["file:///C:/Users/14416/Desktop/gameassets/cocos-start-demo-master/assets/runtime/eventManage.ts"],"names":["EventManage","Singleton","Map","Instance","getInstance","on","eventName","func","ctx","eventDict","has","get","push","set","off","index","findIndex","i","splice","emit","params","forEach","apply","console","info","clear"],"mappings":";;;yCAOqBA,W;;;;;;;;;;;;;;;;AAPZC,MAAAA,S,iBAAAA,S;;;;;;;yBAOYD,W,GAAN,MAAMA,WAAN;AAAA;AAAA,kCAAoC;AAAA;AAAA;;AAAA,6CAMV,IAAIE,GAAJ,EANU;AAAA;;AAE5B,mBAARC,QAAQ,GAAE;AACjB,iBAAO,MAAMC,WAAN,EAAP;AACH;;AAIDC,QAAAA,EAAE,CAACC,SAAD,EAAoBC,IAApB,EAAoCC,GAApC,EAAkD;AAChD,cAAG,KAAKC,SAAL,CAAeC,GAAf,CAAmBJ,SAAnB,CAAH,EAAiC;AAC7B,iBAAKG,SAAL,CAAeE,GAAf,CAAmBL,SAAnB,EAA8BM,IAA9B,CAAmC;AAACL,cAAAA,IAAD;AAAMC,cAAAA;AAAN,aAAnC;AACH,WAFD,MAEK;AACD,iBAAKC,SAAL,CAAeI,GAAf,CAAmBP,SAAnB,EAA6B,CAAC;AAACC,cAAAA,IAAD;AAAMC,cAAAA;AAAN,aAAD,CAA7B;AACH;AACJ;;AAEDM,QAAAA,GAAG,CAACR,SAAD,EAAoBC,IAApB,EAAmC;AAClC,cAAG,KAAKE,SAAL,CAAeC,GAAf,CAAmBJ,SAAnB,CAAH,EAAiC;AAC9B,gBAAMS,KAAK,GAAG,KAAKN,SAAL,CAAeE,GAAf,CAAmBL,SAAnB,EAA8BU,SAA9B,CAAwCC,CAAC,IAAEA,CAAC,CAACV,IAAF,IAAQA,IAAnD,CAAd;AACAQ,YAAAA,KAAK,GAAG,CAAC,CAAT,IAAc,KAAKN,SAAL,CAAeE,GAAf,CAAmBL,SAAnB,EAA8BY,MAA9B,CAAqCH,KAArC,EAA4C,CAA5C,CAAd;AACF;AACJ;;AAEDI,QAAAA,IAAI,CAACb,SAAD,EAAyC;AAAA,4CAAlBc,MAAkB;AAAlBA,YAAAA,MAAkB;AAAA;;AACzC,cAAG,KAAKX,SAAL,CAAeC,GAAf,CAAmBJ,SAAnB,CAAH,EAAiC;AAC7B,iBAAKG,SAAL,CAAeE,GAAf,CAAmBL,SAAnB,EAA8Be,OAA9B,CAAsC,UAAe;AAAA,kBAAd;AAACd,gBAAAA,IAAD;AAAOC,gBAAAA;AAAP,eAAc;AACjD,kBAAGA,GAAH,EAAQD,IAAI,CAACe,KAAL,CAAWd,GAAX,EAAgBY,MAAhB,EAAR,KACKb,IAAI,CAAC,GAAGa,MAAJ,CAAJ;AACR,aAHD;AAIH,WALD,MAKK;AACDG,YAAAA,OAAO,CAACC,IAAR,qBAA+BlB,SAA/B;AACH;AACJ;;AAEDmB,QAAAA,KAAK,GAAE;AACH,eAAKhB,SAAL,CAAegB,KAAf;AACH;;AApC8C,O","sourcesContent":["import { Singleton } from \"db://assets/base/base\";\n\nexport interface Iitem {\n    func: Function,\n    ctx: unknown,\n}\n\nexport default class EventManage extends Singleton {\n\n    static get Instance(){\n        return super.getInstance<EventManage>();\n    }\n\n    eventDict:Map<string,Array<Iitem>> = new Map();\n\n    on(eventName: string, func: Function, ctx?: unknown){\n        if(this.eventDict.has(eventName)){\n            this.eventDict.get(eventName).push({func,ctx});\n        }else{\n            this.eventDict.set(eventName,[{func,ctx}]);\n        }\n    }\n\n    off(eventName: string, func: Function){\n        if(this.eventDict.has(eventName)){\n           const index = this.eventDict.get(eventName).findIndex(i=>i.func!=func);\n           index > -1 && this.eventDict.get(eventName).splice(index, 1);\n        }\n    }\n\n    emit(eventName: string, ...params: unknown[]){\n        if(this.eventDict.has(eventName)){\n            this.eventDict.get(eventName).forEach(({func, ctx})=>{\n                if(ctx) func.apply(ctx, params);\n                else func(...params);\n            })\n        }else{\n            console.info(`don't have the ${eventName} event`)\n        }\n    }\n\n    clear(){\n        this.eventDict.clear();\n    }\n}\n"]}